//
//  ExpDevices.swift
//  HPFS
//
//  Created by –†–æ–º–∞–Ω on 07.08.2025.
//

import SwiftUI

struct WiFiCredentialsView: View {
    @State private var ssid = ""
    @State private var password = ""
    @State private var isSending = false
    @State private var resultMessage = ""
    @State private var humidity: String = "-"
    @State private var water: String = "-"


    var body: some View {
        VStack(spacing: 20) {
            TextField("–ù–∞–∑–≤–∞–Ω–∏–µ Wi-Fi —Å–µ—Ç–∏", text: $ssid)
                .textFieldStyle(.roundedBorder)

            SecureField("–ü–∞—Ä–æ–ª—å –æ—Ç Wi-Fi", text: $password)
                .textFieldStyle(.roundedBorder)

            Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å") {
                sendCredentials()
                fetchSensorData()
            }
            .buttonStyle(.borderedProminent)

            if isSending {
                ProgressView("–û—Ç–ø—Ä–∞–≤–∫–∞...")
            }

            if !resultMessage.isEmpty {
                Text(resultMessage)
                    .foregroundColor(.gray)
            }
            if !humidity.isEmpty || !water.isEmpty {
                VStack(spacing: 10) {
                    HStack {
                        Text("üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å:")
                        Spacer()
                        Text(humidity)
                            .bold()
                    }
                    HStack {
                        Text("üåä –í–æ–¥–∞:")
                        Spacer()
                        Text(water)
                            .bold()
                    }
                }
                .padding()
                .background(.thinMaterial)
                .cornerRadius(12)
                .onAppear {
                    fetchSensorData()
                }

            }

        }
        .padding()
        .navigationTitle("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wi-Fi")
        .onAppear {
            fetchSensorData()
        }

    }

    func sendCredentials() {
        guard let url = URL(string: "http://192.168.4.1/provision") else { return }

        let payload: [String: String] = [
            "ssid": ssid,
            "password": password
        ]

        guard let jsonData = try? JSONSerialization.data(withJSONObject: payload) else { return }

        isSending = true
        resultMessage = ""

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.httpBody = jsonData
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")

        URLSession.shared.dataTask(with: request) { data, response, error in
            DispatchQueue.main.async {
                isSending = false
                if let error = error {
                    resultMessage = "–û—à–∏–±–∫–∞: \(error.localizedDescription)"
                } else {
                    resultMessage = "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!"
                }
            }
        }.resume()
    }
    func fetchSensorData() {
        guard let url = URL(string: "http://195.133.25.176:5000/data") else { return } // ‚Üê –ø–æ–º–µ–Ω—è–π –Ω–∞ IP —Å–≤–æ–µ–≥–æ ESP

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("Bearer hpf_secret_token", forHTTPHeaderField: "Authorization")

        URLSession.shared.dataTask(with: request) { data, response, error in
            DispatchQueue.main.async {
                if let data = data,
                   let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any] {
                    humidity = "\(json["humidity"] ?? "-") %"
                    water = (json["water"] as? String) == "yes" ? "–ï—Å—Ç—å –≤–æ–¥–∞" : "–ù–µ—Ç –≤–æ–¥—ã"
                } else {
                    humidity = "-"
                    water = "-"
                }
            }
        }.resume()
    }

}


import SwiftUI
import NetworkExtension

struct AccessPointListView: View {
    @State private var isConnecting = false
    @State private var showNext = false
    @State private var selectedAP = ""
    
    // –£—Å–ª–æ–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ AP-—à–µ–∫ (—ç–º—É–ª—è—Ü–∏—è, —Ç.–∫. iOS –Ω–µ –¥–∞—Å—Ç –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –Ω–∞–ø—Ä—è–º—É—é)
    let fakeAPs = ["HPFS_SETUP_1234", "HPFS_SETUP_5678", "Cafe_FreeWiFi"]
    
    var body: some View {
        NavigationStack {
            List {
                ForEach(fakeAPs.filter { $0.hasPrefix("HPFS_SETUP_") }, id: \.self) { ap in
                    Button(action: {
                        selectedAP = ap
                        connectToAccessPoint(ssid: ap)
                    }) {
                        Text(ap)
                    }
                }
            }
            .overlay {
                if isConnecting {
                    ProgressView("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                }
            }
            .navigationTitle("–í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
            .navigationDestination(isPresented: $showNext) {
                WiFiCredentialsView()
            }
        }
    }
    
    func connectToAccessPoint(ssid: String) {
        isConnecting = true
        
        NEHotspotConfigurationManager.shared.removeConfiguration(forSSID: ssid)
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            let config = NEHotspotConfiguration(ssid: ssid, passphrase: "setup1234", isWEP: false)
            config.joinOnce = false
            
            NEHotspotConfigurationManager.shared.apply(config) { error in
                DispatchQueue.main.async {
                    isConnecting = false
                    
                    if let error = error {
                        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: \(error.localizedDescription)")
//                        resultMessage = "–û—à–∏–±–∫–∞: \(error.localizedDescription)"
                    } else {
                        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ \(ssid)")
                        showNext = true
                    }
                }
            }
        }
    }
}
